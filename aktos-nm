#!/bin/bash
set -eu -o pipefail
safe_source () { [[ ! -z ${1:-} ]] && source $1; _dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; _sdir=$(dirname "$(readlink -f "$0")"); }; safe_source
# end of bash boilerplate

safe_source $_sdir/lib/all.sh

[[ $(whoami) = "root" ]] || { sudo $0 "$@"; exit 0; }

show_help(){
    local script=$(basename $0)
    local reason=${1:-}
    if [[ ! -z $reason ]]; then
        cat <<REASON

    ERROR: $reason

    -------------------------------
REASON
    fi
    cat <<HELP

    Connect to 'your-essid':

    	$script your-essid

    Add a new configuration:

    	$script --add foo [--password 1234] [--name alias]

    --stop        : Disconnect and cleanup
    --search      : Search for available WiFi networks
    --list        : List available saved connections
    --status      : Show current connection status
    --3g          : Connect via 3g usb modem
    --iface [DEV] : connect via this iface. ( Empty means "list available")

HELP
    exit
}

# Parse command line arguments
# ---------------------------
# Initialize parameters
cmd='connect'
# ---------------------------
args=("$@")
_count=1
while :; do
    key="${1:-}"
    case $key in
        -h|-\?|--help|'')
            show_help    # Display a usage synopsis.
            exit
            ;;
        # --------------------------------------------------------
        --add) shift
            essid="${1:-}"
            cmd='add'
            ;;
        --password) shift       # Takes an option argument; ensure it has been specified.
            if [ "${1:-}" ]; then
                password="${1:-}"
            fi
            ;;
        --name) shift       # Takes an option argument; ensure it has been specified.
            if [ "$1" ]; then
                name="$1"
            fi
            ;;
        --stop)       # Takes an option argument; ensure it has been specified.
            cmd='stop'
            ;;
        --search)       # Takes an option argument; ensure it has been specified.
            cmd='search'
            ;;
        --status)
            iw dev | grep ssid
            exit 0
            ;;
        --list)
            cmd="list"
            ;;
        --3g)
            cmd="3g"
            ;;
        --iface) shift
            iface=${1:-}
            if [[ -z $iface ]]; then
                echo "Displaying available interfaces:"
                echo "--------------------------------"
                sudo lshw -class network | grep "logical name"
                exit 
            fi 
            ;;
        # --------------------------------------------------------
        -*) # Handle unrecognized options
            echo
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)  # Generate the new positional arguments: $arg1, $arg2, ... and ${args[@]}
            if [[ ! -z ${1:-} ]]; then
                declare arg$((_count++))="$1"
                args+=("$1")
            fi
            ;;
    esac
    shift
    [[ -z ${1:-} ]] && break
done; set -- "${args[@]}"
# use $_arg1 in place of $1, $_arg2 in place of $2 and so on, "$@" is intact

# include hardware configuration
config="$_sdir/../config.sh"
if [[ ! -f $config ]]; then
    echo "No configuration file ($(realpath $config)) found."
    echo
    echo "Use $_sdir/config.sh.sample as a template."
    exit 1
fi

safe_source $config
if [[ -n ${iface:-} ]]; then
    echo "Note: Using $iface instead of $_wlan0"
    _wlan0=$iface
fi

conf_dir="$_sdir/../passwords.d"
case $cmd in
    connect)
        essid="$arg1"
        conf_file="${conf_dir}/$essid.conf"
        if [[ ! -f $conf_file ]]; then 
            echo "No configuration file found for essid: \"$essid\"."
            exit 1
        fi
        ;;
    add)
        [[ -z $essid ]] && show_help "ESSID is required"
        name="${name:-$essid}"
        conf_file="${conf_dir}/${name}.conf"
        if [[ -f "$conf_file" ]]; then
            backup="${conf_file}_`date +%Y%m%dT%H%M`"
            echo_yellow "Warning: Moving old ${name}.conf as $backup"
            mv "$conf_file" "$backup"
        fi
        echo "Adding $name ($essid)"
        $_sdir/config-wifi "$conf_file" "$essid" "${password:-}"
        ;;
    stop)
        $_sdir/connect-wifi stop
        sudo ifconfig $_wlan0 down
        exit 0
        ;;
    search)
        sudo ifconfig $_wlan0 up
        while read -r network; do
            name=$(echo $network | awk '{print $1}')
            saved_name=
            while read -r known; do
                saved_name=$(echo $known | cut -d: -f1 | xargs -I {} basename {} | sed 's/\.conf$//')
            done <<< $(grep "ssid=\"$name\"" $conf_dir/* 2>/dev/null || true)
            GREEN='\033[1;32m'
            NC='\033[0m' # No Color
            if [[ -n $saved_name ]]; then
                echo -ne $GREEN
                echo -n "$network"
                echo -ne "\t$saved_name"
                echo -e $NC
            else
                echo "$network"
            fi
        done <<< $(sudo iwlist $_wlan0 scan | $_sdir/iw_parse/iw_parse | sed 1d)
        exit 0
        ;;
    list)
        ls $conf_dir
        ;;
    3g)
        $_sdir/connect-3g
        ;;
esac

case $cmd in
    connect|add)
        # connect
        $_sdir/connect-wifi $_wlan0 "$conf_file"
        ;;
esac
